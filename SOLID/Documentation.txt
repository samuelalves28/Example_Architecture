Solid é um acrônimo para os cinco princípios da programação orientada a objetos e design de código. 

S -> Single Responsibility Principle (SRP): Uma classe deve ter um, e somente um, motivo para ser modificada. Então, 
uma classe deve ter apenas uma responsabilidade. Pois a gente tem um poruqe dela existir, e ela deve fazer apenas isso.

O -> Open/Closed Principle (OCP): Entidades de software(clsses, módulos, funções, etc) devem estar abertas para extensão, 
mas fechadas para modificação. Por exemplo usar métodos publicos. Então oque quer dizer e que temos que ter uma classe pai
que não permite que seja alterada, mas que pode ser extendida, e ter classes filhas que podem ser alteradas.

L -> Liskov Substitution Principle (LSP): Se q(x) é uma propriedade demonstrável dos objetos x de tipo T, então q(y) deve 
ser verdadeiro para objetos y de tipo S onde S é um subtipo de T. Então subclasses devem ser substituíveis por suas 
superclasses. Temos um exemplo "Se nada como um pato, voa como pato porém precisa de baterias, provavemente você possui um
problema de abstração", ou seja, se tentamos um pato de brinquedo que herdar de um pato real, e se quisermos substituir 
pela a classe que herdamos não conseguimos, pois o pato de brinquedo precisa de baterias para funcionar.	

I -> Interface Segregation Principle (ISP): Classes não devem depender de métodos que não usam. Muitas interfaces específicas
são melhores do que uma interface unica.

D -> Dependency Inversion Principle: Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender de abstrações. Abstrações não devem depender de
detalhes. Detalhes devem depender de abstrações. Dependa de uma abstração e não de uma implementação.

Os principios SOLID devem ser aplicados para se obter os benefícios da programação orientada a objetos. são eles:
- Seja facil de se mantarm adptar, entender e ajustar às alterações do projeto.  Pois a maior dor das aplicações hoje em dia é a
dificuldade de adaptação e manutenção caso seja nescessario. 
- Seja testável e facil entendimento, pois a maior parte do tempo de desenvolvimento é gasto em manutenção e correção de bugs.
- Seja extensível para alterações com o menor esforço possivel.
- Que forneça o máximo de reaproveitamento de código, pois a reutilização de código é um dos principais objetivos da programação 
orientada a objetos.
- Que permaneça o máximo de tempo possível em utilização.

Com isso se torne mais facil de se manter, adaptar, entender e ajustar. Temos que ter o objetivo em mente de que o código tem que ser
legivel, e ser bem escrita para que se tiver a necessidade de mudanças e correções, seja facil de se fazer.

O que os princípios do SOLID fazem para nos ajudar a evitar problemas comuns:
- Dificuldade na testabilidade e criação de testes unitários. Se o código for bem escrito, ele será facil de se testar.
- Codigo macarronico, sem estrutura ou padrão.
- Dificuldade de isolar e reutilizar funcionalidades.
- Duplicação de código, aonde a mesma funcionalidade é implementada em varios lugares.
- Fragilidade, o código quebra facilmente em vários pontos após alguma alteração.

------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTÃO 1: Qual alternativa NÃO está correta em relação ao SRP?

- O SRP afirma que uma classe deve ter uma única razão para mudar, ou seja, ela deve ser responsável apenas por uma parte 
específica da funcionalidade de um sistema. Isso não significa que a classe tenha apenas um método, mas que todos os métodos
e funcionalidades dentro dela devem estar relacionados à mesma responsabilidade.

QUESTÃO 2: Como é possível aplicar o conceito de Open/Closed em uma classe?

- Utilizando Extension Methods em classes independentes.
- Criando super classes abstratas que são herdadas e especializadas pelas demais.
- Fazendo uso de herança, abstração, encapsulamento e polimorfismo.

QUESTÃO 3: Qual o principal objetivo do LSP - Liskov Substitution Principle?
- Propor um critério para avaliar se a herança deve ser realizada ou não. O principal objetivo do LSP é questionar se o 
desenvolvedor está realizando uma herança dentro dos padrões de design e abstração ou está apenas seguindo a linha do 
"é um..". 

QUESTÃO 4: Em relação ao ISP - Interface Segregation Principle, é correto afirmar que:
- Clientes não devem ser forçados a depender de métodos que não usam.
- Muitas interfaces específicas são melhores do que uma interface única.
- Programe voltado à interface, não à implementação.